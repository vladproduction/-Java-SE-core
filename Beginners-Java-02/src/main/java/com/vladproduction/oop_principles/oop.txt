Объектно-ориентированное программирование (ООП) - это парадигма программирования, основанная на представлении программы
в виде совокупности объектов.

Основные принципы ООП:

1. Инкапсуляция:
*Объединение данных и методов, работающих с ними, в рамках объекта.
*Ограничение доступа к внутренним деталям объекта.
*Позволяет повысить модульность, безопасность и ремонтопригодность кода.

2. Наследование:
*Создание новых классов (наследников) от существующих (предков).
*Наследники наследуют поля и методы предков, могут добавлять свои.
*Позволяет использовать код повторно, создавать иерархии классов.

3. Полиморфизм:
*Возможность использования объектов разных классов одинаково, через интерфейсы.
*Реализация разных действий для разных типов объектов.
*Повышает гибкость и расширяемость кода.

4. Абстракция:
*Выделение общих характеристик и свойств объектов без реализации деталей.
*Создание абстрактных классов и интерфейсов.
*Позволяет повысить читаемость и понятность кода.

---------------------------------
Дополнительные принципы:
**DRY (Don't Repeat Yourself): Избегайте дублирования кода.
**KISS (Keep It Simple, Stupid): Пишите простой и понятный код.
**SOLID: Набор принципов проектирования классов для обеспечения их надежности, возможности повторного использования
и поддержки.

---------------------------------
Примеры реализации принципов:

Инкапсуляция: Класс Car
содержит private поля engine и transmission.
Доступ к ним осуществляется через public методы.

Наследование: Класс Truck наследует от Car
добавляет поле cargoCapacity.

Полиморфизм: Метод drive()
может быть реализован по-разному
для Car и Truck.

Абстракция: Интерфейс Drawable
декларирует метод draw(), который может быть реализован в разных классах.
---------------------------------

Использование принципов:

*Инкапсуляция: Используйте модификаторы доступа для ограничения доступа к полям и методам.

*Наследование: Используйте наследование для повторного использования кода и создания иерархии классов.

*Полиморфизм: Используйте интерфейсы для реализации разных действий для разных типов объектов.

*Абстракция: Используйте абстрактные классы и интерфейсы для выделения общих характеристик и свойств объектов.
