Это специальная форма синтаксических метаданных, которая может быть добавлена в исходный код.
Аннотации используются для анализа кода, при компиляции или во время выполнения программы.
Их можно применять к пакетам, классам, методам, переменным и параметрам.
Самая простая аннотация, применимая к классу, выглядит так:

@MyAnnotation
public class Foo {}

1. Маркерный интерфейс
С момента появления языка Java возникла необходимость помечать, для выполнения тех или иных
действий, определенным образом класс или иерархию классов. До Java 5 это делалось через
интерфейсы без методов.
Этот вид интерфейса не похож ни на один другой. Он не определяет никаких контрактов между
собой и реализующими его классами, т. к. всегда пуст. Поэтому он называется маркерным интерфейсом.
Такие интерфейсы нужны для маркировки чего-либо для JVM, компилятора или какой-либо библиотеки.
Serializable и Cloneable — два примера маркерных интерфейсов, которые достались нам в наследство.
Например, Serializable позволяет пометить класс, сообщая о том, что его экземпляры можно
сериализовать. При этом перед сериализацией делается проверка на наличие имплементации
этого интерфейса.

public class Foo implements MarkerInterface {} (1)

@MyAnnotation
public class Foo {} (2)

(1) Маркерный интерфейс
(2) Аннотация — эквивалент маркерного интерфейса

По факту, маркерный интерфейс отмечает объект, реализующий какой-либо тип, что исключает
ошибки на этапе компиляции.

Если класс реализует интерфейс, то и все его наследники будут реализовывать этот интерфейс.
Нельзя «отвязать» интерфейс от наследников.
В этом месте аннотации имеют преимущество, поскольку позволяют реализовать такой механизм
«отвязывания». Но в этом есть и минус — проверка наличия маркера (аннотации) теперь проводится
во время исполнения, а не во время компиляции, что чревато ошибками.

    Ключевые моменты:
-Если требуется знать, могут ли методы принимать объекты каких-то классов, то такие классы
удобнее пометить (реализовать) интерфейсами, так как ошибка выявится на этапе компиляции.
-Если необходимо провести анализ метаданных класса, то использование аннотаций даёт больше
возможностей, в том числе принимая во внимание возможность аннотаций иметь параметры.
Однако в этом случае анализ аннотаций происходит во время исполнения кода.