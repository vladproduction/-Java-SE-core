Upcasting and downcasting are fundamental concepts in Java that deal with object references and their
relationships between classes in an inheritance hierarchy. Here's a breakdown of each:

Upcasting (Widening Conversion):

*The process of converting a subclass object reference to a superclass reference.
*It's also known as widening conversion because the target superclass is typically broader in scope than the subclass.
*Upcasting is implicit and can be done without any explicit casting syntax.

Benefits of Upcasting:

Polymorphism: Enables writing generic code that works with various subclasses through superclass references, promoting code reusability.
Flexibility: Allows treating subclass objects as their superclass type, providing different levels of abstraction depending on the context.
Type safety: Upcasting is safe because you're assigning to a wider type, preventing incompatible object assignments.

------------------------------------------------------------------
Downcasting (Narrowing Conversion):

The process of converting a superclass reference to a subclass reference.
It's also known as narrowing conversion because the target subclass is more specific than the superclass.
Downcasting is explicit and requires cast operators to inform the compiler about the intended conversion.

Important Note:

Downcasting is potentially risky because it assumes the object referenced by the superclass is actually of the intended subclass type. If the assumption is wrong (e.g., if animalRef pointed to a different subclass), attempting to use subclass-specific methods or properties could lead to a ClassCastException at runtime.
Therefore, use downcasting with caution and only when you're certain about the object's actual type:

Check the object's type using the instanceof operator before downcasting.
Avoid downcasting excessively, as it can reduce code readability and maintainability.