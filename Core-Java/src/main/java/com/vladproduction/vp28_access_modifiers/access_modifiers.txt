Access modifiers act like gatekeepers for your code.
They control who can access different parts of your program, such as classes, methods, and variables.
This is crucial for:

*Encapsulation: Protecting internal data from unintended modification.
*Code Reusability: Sharing functionalities while hiding implementation details.
*Modularity: Breaking down complex programs into manageable pieces.

----------------------------------------------------------------------------
There are four main access modifiers in Java:

1)Private: The strictest level. Elements declared as private are only accessible within the class they are defined in.
Other classes, even in the same package, cannot access them directly.

2)Default (Package-Private): If you don't specify any access modifier, the element becomes default. It's accessible within
the same package but not outside of it.

3)Protected: Elements declared as protected can be accessed within the class they are defined in, as well as in subclasses
(classes inheriting from it) even if they are in different packages.

4)Public: The most permissive level. Public elements can be accessed from anywhere in your program, as long as you import
the containing class if it's in a different package.

-------------------------------------------------------------------------------
Analogy building with different sections:

*Private room: Accessible only to the occupant (like private methods/variables).

*Apartment floor: Accessible to residents on that floor (like default package-private elements).

*Building common area: Accessible to all residents (like protected elements in subclasses).

*Public street: Accessible to everyone (like public elements).