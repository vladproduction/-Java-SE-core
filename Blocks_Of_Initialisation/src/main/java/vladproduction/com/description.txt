In Java, initialization blocks are used to initialize instance variables or static variables
in a class. They are executed when an object is created (for instance initialization blocks) or
when the class is initialized (for static initialization blocks).

There are two types of initialization blocks:

*Instance Initialization Blocks: These blocks are enclosed within braces {} and are not preceded by
any modifiers (e.g., static). They are used to initialize instance variables for each object created
from the class. The instance initialization block is executed before the constructor.

*Static Initialization Blocks: These blocks are preceded by the static keyword and are used
to initialize static variables or perform any static initialization tasks. They are executed
when the class is first loaded into memory, before any static method is called or any static
variable is accessed.

Initialization blocks are useful when you want to perform common initialization tasks for all
objects or initialize static variables in a class. They provide flexibility and allow you to
organize and centralize the initialization code in a clear manner.